import { PrismaClient } from '@prisma/client';
import { ExportData, ExportProduct, ExportCategory, MediaFile } from '@/types';
import * as fs from 'fs';
import * as path from 'path';
import JSZip from 'jszip';
import * as XLSX from 'xlsx';

const prisma = new PrismaClient();

export class ExportService {
  async exportData(format: 'zip' | 'json' | 'xlsx' = 'zip'): Promise<Buffer> {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportData = await this.collectExportData();
      
      switch (format) {
        case 'json':
          return Buffer.from(JSON.stringify(exportData, null, 2), 'utf-8');
          
        case 'xlsx':
          return await this.createXLSXExport(exportData);
          
        case 'zip':
        default:
          return await this.createZIPExport(exportData);
      }
    } catch (error) {
      console.error('Export error:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private async collectExportData(): Promise<ExportData> {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    const products = await prisma.product.findMany({
      include: {
        variants: true,
        categoryObj: true,
        reviews: true,
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      include: {
        children: true,
        parent: true,
      },
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportProducts: ExportProduct[] = products.map(product => ({
      id: product.id,
      slug: product.slug,
      sku: product.sku || '',
      title: product.title,
      description: product.description || '',
      content: product.content || '',
      price: Number(product.price),
      oldPrice: product.oldPrice ? Number(product.oldPrice) : undefined,
      currency: product.currency || 'RUB',
      stock: product.stock,
      minOrder: product.minOrder || 1,
      weight: product.weight ? Number(product.weight) : undefined,
      dimensions: product.dimensions || undefined,
      material: product.material || undefined,
      category: product.categoryObj?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      tags: product.tags || [],
      images: product.images || [],
      isActive: product.isActive,
      isFeatured: product.isFeatured || false,
      isInStock: product.stock > 0,
      visibility: product.visibility || 'VISIBLE',
      seo: {
        title: product.seoTitle || undefined,
        description: product.seoDesc || undefined,
        metaTitle: product.metaTitle || undefined,
        metaDesc: product.metaDesc || undefined,
      },
      gallery: [], // –í —Å—Ö–µ–º–µ –Ω–µ—Ç –ø–æ–ª—è gallery
      thumbnail: product.images[0] || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ thumbnail
      variants: product.variants.map(variant => ({
        id: variant.id,
        sku: variant.sku || '',
        attrs: {
          color: variant.color || undefined,
          size: variant.size || undefined,
          material: variant.material || undefined,
        },
        priceDiff: Number(variant.price) - Number(product.price), // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–µ
        stock: variant.stock || 0,
        imageRef: variant.imageUrl || undefined, // –ò—Å–ø–æ–ª—å–∑—É–µ–º imageUrl –∏–∑ —Å—Ö–µ–º—ã
        isActive: variant.isActive,
      })),
      createdAt: product.createdAt.toISOString(),
      updatedAt: product.updatedAt.toISOString(),
    }));

    const exportCategories: ExportCategory[] = categories.map(category => ({
      id: category.id,
      name: category.name,
      slug: category.slug,
      description: category.description || undefined,
      image: category.image || undefined,
      parentId: category.parentId || undefined,
      isActive: category.isActive,
      sortOrder: category.sortOrder || 0,
      seo: {
        title: category.seoTitle || undefined,
        description: category.seoDesc || undefined,
      },
      children: category.children.map(child => ({
        id: child.id,
        name: child.name,
        slug: child.slug,
        description: child.description || undefined,
        image: child.image || undefined,
        parentId: child.parentId || undefined,
        isActive: child.isActive,
        sortOrder: child.sortOrder || 0,
        seo: {
          title: child.seoTitle || undefined,
          description: child.seoDesc || undefined,
        },
      })),
    }));

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    const mediaIndex: MediaFile[] = [];
    const allImages = new Set<string>();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    exportProducts.forEach(product => {
      if (product.images) {
        product.images.forEach(img => allImages.add(img));
      }
      if (product.thumbnail) {
        allImages.add(product.thumbnail);
      }
      if (product.gallery) {
        product.gallery.forEach(img => allImages.add(img));
      }
      product.variants.forEach(variant => {
        if (variant.imageRef) {
          allImages.add(variant.imageRef);
        }
      });
    });

    exportCategories.forEach(category => {
      if (category.image) {
        allImages.add(category.image);
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    allImages.forEach(imageUrl => {
      if (imageUrl && imageUrl.startsWith('http')) {
        mediaIndex.push({
          fileName: path.basename(new URL(imageUrl).pathname),
          checksum: this.generateChecksum(imageUrl),
          originalUrl: imageUrl,
          size: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
          mimeType: this.getMimeTypeFromUrl(imageUrl),
        });
      }
    });

    return {
      schemaVersion: '1.0',
      exportedAt: new Date().toISOString(),
      products: exportProducts,
      categories: exportCategories,
      mediaIndex,
      settings: {
        siteName: '–°—Ç–∏–ª–∏ –ì–æ—Ä–æ–¥–∞',
        siteDescription: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–¥–µ–∂–¥—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤',
        contactEmail: 'info@stili-goroda.ru',
        contactPhone: '+7 (XXX) XXX-XX-XX',
        address: '–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏',
        workingHours: '–ü–Ω-–ü—Ç: 9:00-18:00',
        socialLinks: {
          vk: 'https://vk.com/stili_goroda',
          telegram: 'https://t.me/stili_goroda',
        },
        deliverySettings: {
          freeDeliveryFrom: 5000,
          defaultDeliveryPrice: 500,
        },
      },
    };
  }

  private async createZIPExport(data: ExportData): Promise<Buffer> {
    const zip = new JSZip();
    
    // –î–æ–±–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    zip.file('data.json', JSON.stringify(data, null, 2));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const mediaFolder = zip.folder('media');
    if (mediaFolder) {
      console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageUrls = new Set<string>();
      
      // –ò–∑ —Ç–æ–≤–∞—Ä–æ–≤
      data.products.forEach(product => {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if (product.images) {
          product.images.forEach(img => {
            if (img && img.startsWith('http')) {
              imageUrls.add(img);
            }
          });
        }
        // Thumbnail (–ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        if (product.thumbnail && product.thumbnail.startsWith('http')) {
          imageUrls.add(product.thumbnail);
        }
        // –ò–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        product.variants.forEach(variant => {
          if (variant.imageRef && variant.imageRef.startsWith('http')) {
            imageUrls.add(variant.imageRef);
          }
        });
      });
      
      // –ò–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      data.categories.forEach(category => {
        if (category.image && category.image.startsWith('http')) {
          imageUrls.add(category.image);
        }
      });
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${imageUrls.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let downloadedCount = 0;
      for (const imageUrl of Array.from(imageUrls)) {
        try {
          const fileName = path.basename(new URL(imageUrl).pathname);
          const response = await fetch(imageUrl);
          
          if (response.ok) {
            const imageBuffer = await response.arrayBuffer();
            mediaFolder.file(fileName, imageBuffer);
            downloadedCount++;
            console.log(`‚úÖ –°–∫–∞—á–∞–Ω–æ: ${fileName}`);
          } else {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: ${imageUrl} (${response.status})`);
          }
        } catch (error) {
          console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ${imageUrl}:`, error);
        }
      }
      
      console.log(`üìä –°–∫–∞—á–∞–Ω–æ ${downloadedCount} –∏–∑ ${imageUrls.size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º README —Ñ–∞–π–ª
    zip.file('README.md', `# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –°—Ç–∏–ª–∏ –ì–æ—Ä–æ–¥–∞
    
–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${data.exportedAt}
–í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: ${data.schemaVersion}

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:
- data.json - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–≤–∞—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
- media/ - –ø–∞–ø–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
- README.md - —ç—Ç–æ—Ç —Ñ–∞–π–ª

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –¢–æ–≤–∞—Ä–æ–≤: ${data.products.length}
- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.categories.length}
- –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: ${data.mediaIndex.length}

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- data.json —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö, –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
- media/ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
- –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤

## –ò–º–ø–æ—Ä—Ç:
–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–∞–π—Ç–∞.
`);
    
    return await zip.generateAsync({ type: 'nodebuffer' });
  }

  private async createXLSXExport(data: ExportData): Promise<Buffer> {
    const workbook = XLSX.utils.book_new();
    
    // –õ–∏—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const productsSheet = XLSX.utils.json_to_sheet(
      data.products.map(product => ({
        'ID': product.id,
        'SKU': product.sku,
        '–ù–∞–∑–≤–∞–Ω–∏–µ': product.title,
        '–û–ø–∏—Å–∞–Ω–∏–µ': product.description,
        '–¶–µ–Ω–∞': product.price,
        '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': product.oldPrice || '',
        '–í–∞–ª—é—Ç–∞': product.currency,
        '–û—Å—Ç–∞—Ç–æ–∫': product.stock,
        '–ú–∏–Ω. –∑–∞–∫–∞–∑': product.minOrder,
        '–í–µ—Å': product.weight || '',
        '–†–∞–∑–º–µ—Ä—ã': product.dimensions || '',
        '–ú–∞—Ç–µ—Ä–∏–∞–ª': product.material || '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.category,
        '–¢–µ–≥–∏': product.tags.join(', '),
        '–ê–∫—Ç–∏–≤–µ–Ω': product.isActive ? '–î–∞' : '–ù–µ—Ç',
        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π': product.isFeatured ? '–î–∞' : '–ù–µ—Ç',
        '–í –Ω–∞–ª–∏—á–∏–∏': product.isInStock ? '–î–∞' : '–ù–µ—Ç',
        '–í–∏–¥–∏–º–æ—Å—Ç—å': product.visibility,
        'SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫': product.seo.title || '',
        'SEO –æ–ø–∏—Å–∞–Ω–∏–µ': product.seo.description || '',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': product.images.join(', '),
        '–ì–∞–ª–µ—Ä–µ—è': product.gallery.join(', '),
        '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞': product.thumbnail,
        '–í–∞—Ä–∏–∞–Ω—Ç–æ–≤': product.variants.length,
        '–°–æ–∑–¥–∞–Ω': product.createdAt,
        '–û–±–Ω–æ–≤–ª–µ–Ω': product.updatedAt,
      }))
    );
    XLSX.utils.book_append_sheet(workbook, productsSheet, '–¢–æ–≤–∞—Ä—ã');
    
    // –õ–∏—Å—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const categoriesSheet = XLSX.utils.json_to_sheet(
      data.categories.map(category => ({
        'ID': category.id,
        '–ù–∞–∑–≤–∞–Ω–∏–µ': category.name,
        'Slug': category.slug,
        '–û–ø–∏—Å–∞–Ω–∏–µ': category.description || '',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': category.image || '',
        '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è': category.parentId || '',
        '–ê–∫—Ç–∏–≤–Ω–∞': category.isActive ? '–î–∞' : '–ù–µ—Ç',
        '–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏': category.sortOrder,
        'SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫': category.seo.title || '',
        'SEO –æ–ø–∏—Å–∞–Ω–∏–µ': category.seo.description || '',
        '–î–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π': category.children?.length || 0,
      }))
    );
    XLSX.utils.book_append_sheet(workbook, categoriesSheet, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // –õ–∏—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (data.settings) {
      const settingsSheet = XLSX.utils.json_to_sheet([
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.siteName },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.siteDescription },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'Email', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.contactEmail },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–¢–µ–ª–µ—Ñ–æ–Ω', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.contactPhone },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ê–¥—Ä–µ—Å', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.address },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.workingHours },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.deliverySettings.freeDeliveryFrom },
        { '–ü–∞—Ä–∞–º–µ—Ç—Ä': '–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.settings.deliverySettings.defaultDeliveryPrice },
      ]);
      XLSX.utils.book_append_sheet(workbook, settingsSheet, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
    
    return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
  }

  private generateChecksum(url: string): string {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    return Buffer.from(url).toString('base64').substring(0, 16);
  }

  private getMimeTypeFromUrl(url: string): string {
    const extension = path.extname(new URL(url).pathname).toLowerCase();
    const mimeTypes: Record<string, string> = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp',
      '.svg': 'image/svg+xml',
    };
    return mimeTypes[extension] || 'application/octet-stream';
  }
}
